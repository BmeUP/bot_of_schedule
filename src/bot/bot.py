import logging
import datetime
import platform
from aiogram import types, Dispatcher
from aiogram.bot.bot import Bot
from ..db.database import s
from ..db.models.users_time import UserTime
from .tokens import Apikeys

if 'MANJARO' in platform.release():
    API_TOKEN = Apikeys.test
else:
    API_TOKEN = Apikeys.prod

# Configure logging
logging.basicConfig(encoding='utf-8', level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_using(message: types.Message):
    msg = '–ü—Ä–∏–≤–µ—Ç, –Ø —Ç–≤–æ—è –ë—É–ª–æ—á–∫–∞ —Å –ö–æ—Ä–∏—Ü–µ–π!\n' + \
        '–ë—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º. \n' + \
        '–ù—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ü–∏—Ñ—Ä—É, –∫ –ø—Ä–∏–º–µ—Ä—É 5, ' + \
        '–∏ –Ø —Ç–µ–±–µ —Å–∫–∏–Ω—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞. \n' + \
        '–í—Å–µ –ø—Ä–æ—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–πüòò'

    await message.answer(msg)

@dp.message_handler(commands=['whoiam'])
async def get_myself(message: types.Message):
    me = message.from_user
    print(me)
    user_name = me.username if me.username else "–ù–∏–∫–∞ –Ω–µ—Ç(\n–ù–∏–∫ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –ø–æ–ª–µ `username`"
    await message.answer(
        f"–¢—ã {me.first_name}\n–¢–≤–æ–π –Ω–∏–∫ - {user_name}\n–¢–≤–æ–π id - {me.id}"
        )

async def send_message_to_me(msg):
    await bot.send_message(
        Apikeys.me, f'{msg.from_user.first_name} - {msg.from_user.username} -' +\
                    f'{msg.text} - {datetime.datetime.now()}')

@dp.message_handler()
async def echo(message: types.Message):
    schedule_string = ''
    await send_message_to_me.__call__(message)
    if not message.text.isdigit():
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—É')
    elif int(message.text) > 31:
        await message.answer('–í –º–µ—Å—è—Ü–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 31 –¥–Ω—è.')
    else:
        usr_tim = s.query(UserTime).filter_by(date=message.text).all()
        for i in usr_tim:
            if i.time != '':
                schedule_string += f'{i.parent.fullname} {i.parent.position} {i.time} \n'
        await message.answer(schedule_string)
